[% site_config.title = 'Web Phone for ' _ subscriber.username _ '@' _ subscriber.domain.domain -%]

<style>
    #xmpp-roster {
        list-style-type: none;
    }
    .xmpp-roster-entry {
        font-size: 1.2em;
    }
    .xmpp-roster-entry.available {
        color: green;
    }
    .xmpp-roster-entry.unavailable {
        color: gray;
    }
    .xmpp-roster-entry.chat {
        color: green;
    }
    .xmpp-roster-entry.away, 
    .xmpp-roster-entry.xa {
        color: orange;
    }
    .xmpp-roster-entry.dnd {
        color: red;
    }

</style>

<div class="row">
    <span class="pull-left" style="margin:0 5px 0 5px;">
        <a class="btn btn-primary btn-large" href="[% c.uri_for('/back') %]"><i class="icon-arrow-left"></i> Back</a>
    </span>
</div>
[% back_created = 1 -%]

<div class="ngcp-separator"></div>


    <script type="text/javascript" src="/js/libs/jssip-0.3.0.min.js"></script>
    <!--<script type="text/javascript" src="/js/libs/stanzaio.bundle.min.js"></script>-->
    <script type="text/javascript" src="/js/libs/stanzaio.bundle.js"></script>
    <script type="text/javascript" src="/js/libs/bootstrap-select.min.js"></script>
    <script type="text/javascript" src="/js/libs/bootstrap-select.min.js"></script>
    <link rel="stylesheet" type="text/css" href="/css/bootstrap-select/bootstrap-select.min.css"/>
    <script type="text/javascript">

        var phone = null;
        var chat = null;
        var sip_configuration = null;
        var xmpp_configuration = null;
        var xmpp_last_state = 'available';

        $.ajax({
            url: "[% c.uri_for_action('/subscriber/webphone_ajax', c.req.captures) %]"
        }).done(function(data) {

            sip_configuration = data.aaData.sip;
            sip_configuration.register = true;
            //sip_configuration.trace_sip = true;
            phone = new JsSIP.UA(sip_configuration);

            // ws connection events
            phone.on('connected', function(e){
                console.log("connected");
                $("#sip-status").html("connected - registering...");
            });
            phone.on('disconnected', function(e){
                console.log("disconnected");
                $("#sip-status").html("disconnected.");
            });
            // in/out call event
            phone.on('newRTCSession', function(e){
                console.log("newRTCSession");
            });
            // in/out im event
            phone.on('newMessage', function(e){
                console.log("newMessage");
            });
            // registration events
            phone.on('registered', function(e){
                console.log("registered");
                $("#sip-status").html("registered.");
            });
            phone.on('unregistered', function(e){
                console.log("unregistered");
                $("#sip-status").html("unregistered.");
            });
            phone.on('registrationFailed', function(e){
                console.log("registrationFailed", e.data.response);
                $("#sip-status").html("registration failed: " + e.data.response.status_code + " - " + e.data.response.reason_phrase);
            });

            phone.start();

            xmpp_configuration = data.aaData.xmpp;
            // chat client modifies it, so make a copy to have the original
            // one later on re-connects
            var tmp_xmpp_configuration = jQuery.extend(true, {}, xmpp_configuration);
            chat = XMPP.createClient(tmp_xmpp_configuration);
            register_chat_callbacks();
            chat.connect();
        });

        function register_chat_callbacks() {
            var timer = null;
            chat.on('disconnected', function() {
                console.log("xmpp disconnection");
                $("#xmpp-status").html("disconnected.");
                if(timer)
                    return 1;
                console.log("prepare re-connect timer");
                $('#xmpp-roster').empty();
                var xmpp_last_state_tmp = xmpp_last_state;
                $('#xmpp-pres').val('unavailable');
                $('#xmpp-pres').change();
                xmpp_last_state = xmpp_last_state_tmp;
                timer = window.setInterval(function(){
                    console.log("perform re-connect");
                    window.clearInterval(timer);
                    timer = null;
                    chat.disconnect();
                    console.log("create new client", xmpp_configuration);
                    var tmp_xmpp_configuration = jQuery.extend(true, {}, xmpp_configuration);
                    chat = XMPP.createClient(tmp_xmpp_configuration);
                    register_chat_callbacks();
                    chat.connect();
                }, 3000);
            });

            chat.on('chatState', function(obj) {
                console.log("got chat state", obj);
                var jid = obj.from.bare;
                var msg;
                if(obj.chatState == "composing") {
                    msg = jid + " is typing...";
                } else if(obj.chatState == "paused") {
                    msg = jid + " has stopped typing.";
                } else if(obj.chatState == "active") {
                    // chat session started/closed
                }
                $("#xmpp-status").html(msg);
            });
            chat.on('chat', function(obj) {
                console.log("got message ", obj);
                var jid = obj.from.bare;
                $("#xmpp-status").html(jid + " has sent: " + obj.body);
            });
            chat.on('groupchat', function(message) {
                console.log("got group message ", message);
            });

            chat.on('session:started', function() {
                $("#xmpp-status").html("session-started.");
                console.log("++++++++++++++++++ session started");
                chat.enableCarbons();
                chat.getRoster(function(err, resp) {
                    console.log(">>>>>>>>>>>> getRoster");
                    console.log(err, resp);
                    chat.sendPresence();
                    if(err == null) {
                        $.each(resp.roster.items, function(index, item) {
                            console.log(item.name);
                            var jidid = item.jid.bare.replace(/[^a-zA-Z0-9_]/g, '-');
                            $("#xmpp-roster").append('<li id="' + jidid + '"><span class="xmpp-roster-entry icon-user"></span> ' + item.jid.bare + '</span> <i>' + item.name + '</i> <span class="icon-comment xmpp-start-chat" data-jid="' + item.jid.bare + '"></span></li>');
                        });
                    }
                    $('.xmpp-start-chat').click(function(obj) {
                        var jid = obj.currentTarget.dataset.jid;
                        console.log("starting chat with " + jid);

                        chat.sendMessage({to: jid, body: "hello world"});
                    });
                    $('#xmpp-pres').val(xmpp_last_state);
                    $('#xmpp-pres').change();
                });
            });
            chat.on('presence', function(pres) {
                if(pres.from.bare == xmpp_configuration.jid) {
                    console.log("skip own presence info");
                    return 1;
                }
                var type = pres.type || 'available';
                var show;
                if(type == 'available') {
                    show = pres.show || 'available';
                } else {
                    show = pres.show || 'unavailable';
                }
                var jidid = pres.from.bare.replace(/[^a-zA-Z0-9_]/g, '-');

                $("#xmpp-roster #" + jidid + " .xmpp-roster-entry").removeClass().addClass("xmpp-roster-entry icon-user " + show);

                //console.log("+++++++ xmpp cb " + pres.type + " for from=" + pres.from.bare + " and to=" + pres.to.bare, pres);
                console.log("+++++++ type=" + pres.type + ", show=" + pres.show);
            });

        }

        function call() {
            var eventHandlers = {
                'progress': function(e) {
                    console.log("call in progress");
                    $("#sip-status").html("in progress");
                },
                'failed': function(e) { 
                    console.log("call failed");
                    $("#sip-status").html("call failed");
                },
                'started': function(e) {
                    console.log("call started");
                    $("#sip-status").html("call started");

                    var rtcSession = e.sender;

                    if (rtcSession.getLocalStreams().length > 0) {
                      selfView.src = window.URL.createObjectURL(rtcSession.getLocalStreams()[0]);
                    }
                    if (rtcSession.getRemoteStreams().length > 0) {
                      remoteView.src = window.URL.createObjectURL(rtcSession.getRemoteStreams()[0]);
                    }
                },
                'ended': function(e){ 
                    console.log("call ended");
                    $("#sip-status").html("call ended");
                }
            };

            var options = {
              'eventHandlers': eventHandlers,
              'extraHeaders': [ 'X-Foo: foo', 'X-Bar: bar' ],
              'mediaConstraints': {'audio': true, 'video': false}
            };

            phone.call('sip:voicebox@pbx1.demo.sipwise.com', options);
        }

        $(function() {
            $('.selectpicker').selectpicker();

            $('#xmpp-pres').change(function(obj) {
                var show = obj.currentTarget[obj.currentTarget.selectedIndex].value;
                xmpp_last_state = show;
                var type = (show == "unavailable" ? "unavailable" : "available");
                console.log("changing xmpp presence status, show=" + show + ", type=" + type);
                if(show == "available") {
                    chat.sendPresence();
                } else {
                    chat.sendPresence({ type: type, show: show });
                }
            });

        });


    </script>

    <div class="row">
        <div class="span6">Phone Status: <span id="sip-status">connecting...</span></div>
    </div>
    <div class="row">
        <div class="span6">Chat Status: <span id="xmpp-status">connecting...</span></div>
    </div>
    <div class="row">
        <button onclick="javascript:call();" class="btn btn-large btn-primary">Call</a>
    </div>
    <div class="row">
        <h3>Change XMPP Status</h3>
        <select id="xmpp-pres" class="selectpicker">
            [% FOR opt IN 
                [
                    { n = "unavailable", d = "Offline" },
                    { n = "available", d = "Available" },
                    { n = "away", d = "Away" },
                    { n = "xa", d = "Extended Away" },
                    { n = "dnd", d = "Do Not Disturb" },
                ]
            -%]
                <option value="[% opt.n %]" data-content="<span class='icon-user xmpp-roster-entry [% opt.n %]'></span><span> [% opt.d %]</span>">[% opt.d %]</option>
            [% END -%]
        </select>
    </div>
    <div class="row">
        <h3>XMPP Roster</h3>
        <ul id="xmpp-roster">
        </ul>
    </div>
    

    <video id="selfView" autoplay hidden=true></video>
    <video id="remoteView" autoplay hidden=true></video>

[% # vim: set tabstop=4 syntax=html expandtab: -%]
